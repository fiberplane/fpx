/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WorkflowsImport } from './routes/workflows'
import { Route as TracesImport } from './routes/traces'
import { Route as IndexImport } from './routes/index'
import { Route as WorkflowsIndexImport } from './routes/workflows.index'
import { Route as TracesIndexImport } from './routes/traces.index'
import { Route as WorkflowsNewImport } from './routes/workflows.new'
import { Route as WorkflowsWorkflowIdImport } from './routes/workflows.$workflowId'
import { Route as TracesTraceIdImport } from './routes/traces.$traceId'

// Create/Update Routes

const WorkflowsRoute = WorkflowsImport.update({
  id: '/workflows',
  path: '/workflows',
  getParentRoute: () => rootRoute,
} as any)

const TracesRoute = TracesImport.update({
  id: '/traces',
  path: '/traces',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WorkflowsIndexRoute = WorkflowsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WorkflowsRoute,
} as any)

const TracesIndexRoute = TracesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TracesRoute,
} as any)

const WorkflowsNewRoute = WorkflowsNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => WorkflowsRoute,
} as any)

const WorkflowsWorkflowIdRoute = WorkflowsWorkflowIdImport.update({
  id: '/$workflowId',
  path: '/$workflowId',
  getParentRoute: () => WorkflowsRoute,
} as any)

const TracesTraceIdRoute = TracesTraceIdImport.update({
  id: '/$traceId',
  path: '/$traceId',
  getParentRoute: () => TracesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/traces': {
      id: '/traces'
      path: '/traces'
      fullPath: '/traces'
      preLoaderRoute: typeof TracesImport
      parentRoute: typeof rootRoute
    }
    '/workflows': {
      id: '/workflows'
      path: '/workflows'
      fullPath: '/workflows'
      preLoaderRoute: typeof WorkflowsImport
      parentRoute: typeof rootRoute
    }
    '/traces/$traceId': {
      id: '/traces/$traceId'
      path: '/$traceId'
      fullPath: '/traces/$traceId'
      preLoaderRoute: typeof TracesTraceIdImport
      parentRoute: typeof TracesImport
    }
    '/workflows/$workflowId': {
      id: '/workflows/$workflowId'
      path: '/$workflowId'
      fullPath: '/workflows/$workflowId'
      preLoaderRoute: typeof WorkflowsWorkflowIdImport
      parentRoute: typeof WorkflowsImport
    }
    '/workflows/new': {
      id: '/workflows/new'
      path: '/new'
      fullPath: '/workflows/new'
      preLoaderRoute: typeof WorkflowsNewImport
      parentRoute: typeof WorkflowsImport
    }
    '/traces/': {
      id: '/traces/'
      path: '/'
      fullPath: '/traces/'
      preLoaderRoute: typeof TracesIndexImport
      parentRoute: typeof TracesImport
    }
    '/workflows/': {
      id: '/workflows/'
      path: '/'
      fullPath: '/workflows/'
      preLoaderRoute: typeof WorkflowsIndexImport
      parentRoute: typeof WorkflowsImport
    }
  }
}

// Create and export the route tree

interface TracesRouteChildren {
  TracesTraceIdRoute: typeof TracesTraceIdRoute
  TracesIndexRoute: typeof TracesIndexRoute
}

const TracesRouteChildren: TracesRouteChildren = {
  TracesTraceIdRoute: TracesTraceIdRoute,
  TracesIndexRoute: TracesIndexRoute,
}

const TracesRouteWithChildren =
  TracesRoute._addFileChildren(TracesRouteChildren)

interface WorkflowsRouteChildren {
  WorkflowsWorkflowIdRoute: typeof WorkflowsWorkflowIdRoute
  WorkflowsNewRoute: typeof WorkflowsNewRoute
  WorkflowsIndexRoute: typeof WorkflowsIndexRoute
}

const WorkflowsRouteChildren: WorkflowsRouteChildren = {
  WorkflowsWorkflowIdRoute: WorkflowsWorkflowIdRoute,
  WorkflowsNewRoute: WorkflowsNewRoute,
  WorkflowsIndexRoute: WorkflowsIndexRoute,
}

const WorkflowsRouteWithChildren = WorkflowsRoute._addFileChildren(
  WorkflowsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/traces': typeof TracesRouteWithChildren
  '/workflows': typeof WorkflowsRouteWithChildren
  '/traces/$traceId': typeof TracesTraceIdRoute
  '/workflows/$workflowId': typeof WorkflowsWorkflowIdRoute
  '/workflows/new': typeof WorkflowsNewRoute
  '/traces/': typeof TracesIndexRoute
  '/workflows/': typeof WorkflowsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/traces/$traceId': typeof TracesTraceIdRoute
  '/workflows/$workflowId': typeof WorkflowsWorkflowIdRoute
  '/workflows/new': typeof WorkflowsNewRoute
  '/traces': typeof TracesIndexRoute
  '/workflows': typeof WorkflowsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/traces': typeof TracesRouteWithChildren
  '/workflows': typeof WorkflowsRouteWithChildren
  '/traces/$traceId': typeof TracesTraceIdRoute
  '/workflows/$workflowId': typeof WorkflowsWorkflowIdRoute
  '/workflows/new': typeof WorkflowsNewRoute
  '/traces/': typeof TracesIndexRoute
  '/workflows/': typeof WorkflowsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/traces'
    | '/workflows'
    | '/traces/$traceId'
    | '/workflows/$workflowId'
    | '/workflows/new'
    | '/traces/'
    | '/workflows/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/traces/$traceId'
    | '/workflows/$workflowId'
    | '/workflows/new'
    | '/traces'
    | '/workflows'
  id:
    | '__root__'
    | '/'
    | '/traces'
    | '/workflows'
    | '/traces/$traceId'
    | '/workflows/$workflowId'
    | '/workflows/new'
    | '/traces/'
    | '/workflows/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TracesRoute: typeof TracesRouteWithChildren
  WorkflowsRoute: typeof WorkflowsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TracesRoute: TracesRouteWithChildren,
  WorkflowsRoute: WorkflowsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/traces",
        "/workflows"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/traces": {
      "filePath": "traces.tsx",
      "children": [
        "/traces/$traceId",
        "/traces/"
      ]
    },
    "/workflows": {
      "filePath": "workflows.tsx",
      "children": [
        "/workflows/$workflowId",
        "/workflows/new",
        "/workflows/"
      ]
    },
    "/traces/$traceId": {
      "filePath": "traces.$traceId.tsx",
      "parent": "/traces"
    },
    "/workflows/$workflowId": {
      "filePath": "workflows.$workflowId.tsx",
      "parent": "/workflows"
    },
    "/workflows/new": {
      "filePath": "workflows.new.tsx",
      "parent": "/workflows"
    },
    "/traces/": {
      "filePath": "traces.index.tsx",
      "parent": "/traces"
    },
    "/workflows/": {
      "filePath": "workflows.index.tsx",
      "parent": "/workflows"
    }
  }
}
ROUTE_MANIFEST_END */
